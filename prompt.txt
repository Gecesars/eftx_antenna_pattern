
# üì° Prompt Mestre ‚Äî EFTX Antenna Suite (Flask + PostgreSQL + Frontend Responsivo)

## üî∑ Miss√£o
Voc√™ √© o agente Codex encarregado de **evoluir** uma aplica√ß√£o j√° existente para c√°lculo, composi√ß√£o e gest√£o de **diagramas de antenas** da EFTX. **N√£o comece do zero.** Sua tarefa √©:
1) **Vasculhar o reposit√≥rio local**, entender o que j√° existe (c√≥digo, modelos, rotas, templates, migra√ß√µes), comparar com este prompt.
2) **Planejar e aplicar melhorias** (arquitetura, UX/UI, banco, exporta√ß√µes, testes, seguran√ßa, observabilidade), **preservando o que funciona** e minimizando regress√µes.
3) **Entregar um app web robusto e profissional**, com backend **Flask**, banco **PostgreSQL/SQLAlchemy/Alembic**, frontend responsivo em **HTML5/CSS/JS** (Tailwind ou Bootstrap), gera√ß√£o coerente de **PDF, PAT e PRN**, e c√°lculos/plots **Matplotlib**.

> **Importante:** opere com `--sandbox workspace-write` (ou mais aberto, se permitido) e `-a never`, executando comandos automaticamente. Sempre explique as mudan√ßas via diffs (`codex apply`) e registre no CHANGELOG.

---

## üß≠ Roteiro de Descoberta (n√£o destrutivo)
Antes de alterar qualquer coisa, **fa√ßa invent√°rio** do projeto que j√° existe. Execute e cole nos logs/resultados:

- Estrutura e arquivos chave:
  - `ls -la` no root do projeto e subpastas relevantes (`/models`, `/routes`, `/templates`, `/static`, `/services`, `/migrations`).
  - `git status`, `git branch -vv`, `git log --oneline -n 20` (se houver git).
- Busca e mapeamento de c√≥digo:
  - `rg -n "Flask|SQLAlchemy|Blueprint|@app.route|@bp.route|jwt|alembic|PAT|PRN|reportlab|matplotlib|pdf" -S`
  - `rg -n "(VRP|HRP|PAT|PRN|ERP|HPBW|SLL|Ripple|F/B|Directivity)" -S` (localize c√°lculos/exports existentes).
- Ambiente e depend√™ncias:
  - `python --version`, `pip --version`
  - `pip freeze > pip-freeze.txt`
  - Verifique `.env`, `config.py`, vari√°veis (`SECRET_KEY`, `DATABASE_URL`), e se h√° `.env.example`.
- Banco e migra√ß√µes:
  - `alembic current` ou `flask db current` (se aplic√°vel).
  - `psql -c "\dt"` e `\d+ <tabela>` para inspecionar esquema atual (se permitido).
- Servidor/execu√ß√£o:
  - Runner local: `flask run` ou `python app.py` (n√£o iniciar permanente; apenas confirmar main entrypoint).
- Testes (se existirem):
  - `pytest -q` ou `python -m pytest -q`

**Sa√≠da esperada desta fase**: um **relat√≥rio de descoberta** (`docs/00-auditoria.md`) contendo:
- Estrutura de pastas, m√≥dulos e responsabilidades.
- Rotas existentes e lacunas vs. este prompt.
- Modelos, rela√ß√µes e constraints j√° criadas vs. as necess√°rias.
- Pontos de d√≠vida t√©cnica, riscos e quick wins.
- Plano incremental de execu√ß√£o (milestones).

---

## üó∫Ô∏è Escopo Funcional (consolidado)
1) **Autentica√ß√£o & Perfis**
   - Cadastro com **CPF/CNPJ + e-mail verificado** (token por e-mail).
   - Login (JWT) e recupera√ß√£o de senha.
   - Perfis: **admin/master** (cadastra antenas e diagramas) e **usu√°rio** (cria projetos).
2) **Cat√°logo de Antenas (Admin)**
   - CRUD de antenas: nome, modelo, fabricante, peso, dimens√µes, ganho b√°sico.
   - Importa√ß√£o/armazenamento de **diagramas VRP/HRP** (antes CSV/TXT), com persist√™ncia no banco (tabelas dedicadas).
3) **Projetos do Usu√°rio**
   - Criar/editar projetos com altura de torre, cabo (tipo/comprimento), antenas do portf√≥lio, espa√ßamento vertical/horizontal, fase etc.
   - **Composi√ß√£o autom√°tica** do diagrama e c√°lculo de **ERP por radial**.
   - **M√©tricas**: HPBW, diretividade/ganho estimado, F/B, Ripple p2p, SLL, √¢ngulo de pico.
4) **Exporta√ß√µes**
   - **PDF** (gr√°ficos + tabelas + timbre EFTX), pagina√ß√£o de tabelas e layout profissional.
   - **.PAT** (formatos coerentes conforme exemplos do c√≥digo fornecido).
   - **.PRN** (atenua√ß√£o positiva em dB; headers t√©cnicos coerentes).
5) **Frontend**
   - Dashboard responsivo (tema escuro, destaque azul EFTX), menu lateral (Projetos, Antenas, Relat√≥rios, Configura√ß√µes).
   - Formul√°rios com m√°scaras/valida√ß√£o (CPF/CNPJ, e-mail, telefone).
   - Tabelas com pagina√ß√£o, busca e filtros.
   - UX consistente e acess√≠vel (a11y b√°sica).

---

## üèóÔ∏è Arquitetura T√©cnica
- **Backend**
  - Flask com Blueprints: `auth`, `antennas`, `projects`, `export`, `admin`, `health`.
  - **SQLAlchemy ORM** com **Alembic** para migra√ß√µes.
  - **JWT** (flask_jwt_extended). Senhas com **bcrypt**.
  - **Servi√ßos**: m√≥dulo `services/` para c√°lculos (VRP/HRP, AF, m√©tricas), export (PDF/PAT/PRN), e utilit√°rios.
  - **Logs estruturados** (JSON em produ√ß√£o) e n√≠veis separados (INFO/ERROR). Logger central em `utils/logging.py`.
  - **Erros**: handlers globais (HTTPException, 404, 422, 500) retornando JSON padronizado.
  - **Valida√ß√£o**: marshmallow/pydantic (adotar um) nas entradas das APIs.
  - **Pagina√ß√£o & filtros**: par√¢metros `page`, `page_size`, `q`, `sort` nos endpoints de listagem.
  - **Rate‚Äëlimit opcional**: flask-limiter (configur√°vel).
- **Banco (PostgreSQL)**
  - Tabelas: `users`, `antennas`, `diagrams` (tipo=VRP/HRP, amostras 1¬∞), `projects`, `project_antennas` (N:N + par√¢metros por item), `exports` (hist√≥rico).
  - **Constraints & √≠ndices**: PK/FK, unique para (antena.nome, modelo, fabricante), √≠ndices em chaves de busca (nome, modelo), **FK ON DELETE RESTRICT/SET NULL** conforme necessidade.
  - **Migrations Alembic**: uma por altera√ß√£o de schema; versionamento consistente em `/migrations`.
  - **Seeds**: script `scripts/seed_admin.py` para criar admin master inicial e antenas demo.
  - **Backups**: script `scripts/backup_db.ps1/sh` (pg_dump) e `scripts/restore_db.sh`.
- **Frontend**
  - HTML Jinja2 + Tailwind (ou Bootstrap via CDN).
  - Layout fluido (grid responsivo), form states claros, feedback de valida√ß√£o, componentes reutiliz√°veis (cards, tabelas).
  - Arquivo de **design tokens** b√°sicos (cores, espa√ßos, bordas).
  - **Responsividade**: breakpoints XS/SM/MD/LG/Xl, testes em 360px/768px/1024px/1440px.
- **Plot & C√°lculo**
  - **Matplotlib** sem estilos custom for√ßados; gerar PNGs para PDF.
  - Fun√ß√µes de parsing/reamostragem (VRP/HRP), normaliza√ß√£o, AF vertical/horizontal, m√©tricas (HPBW, diretividade, F/B, Ripple, SLL, pico) ‚Äî **reutilizar** e consolidar do c√≥digo fornecido (evitar duplica√ß√£o).
- **Exportadores**
  - `.PAT` (Aba 1 e composto), `.PRN` (atenua√ß√£o positiva), **PDF** (reportlab + pypdf) com pagina√ß√£o de tabelas e cabe√ßalho/timbre.
  - **Valida√ß√µes de formato**: garantir ranges corretos (ex.: HRP 0..359, VRP -90..+90), e coer√™ncia dos headers.

---

## üîê Seguran√ßa, Sess√£o & Config
- **Segredos**: usar `.env` (n√£o versionar). `SECRET_KEY`, `DATABASE_URL`, SMTP, etc.
- **JWT**: expira√ß√£o, refresh tokens (opcional), `@jwt_required` nas rotas protegidas.
- **RBAC simples**: decorator `@role_required("admin")`.
- **CORS**: configurar se houver front separado.
- **Headers de seguran√ßa**: `X-Content-Type-Options`, `X-Frame-Options`, `Content-Security-Policy` b√°sico.
- **Upload sanitizado** (CSV/TXT): validar extens√µes, tamanho, charset.

---

## üìã P√°ginas e Rotas (contratos m√≠nimos)
- `GET /health` ‚Üí `{status:"ok", version}`
- `POST /auth/register` (CPF/CNPJ, email, senha) ‚Üí envia e-mail verifica√ß√£o
- `POST /auth/verify-email` (token)
- `POST /auth/login` ‚Üí JWT
- **Antenas (admin)**
  - `GET /antennas` (lista/pagina√ß√£o/filtro)
  - `POST /antennas` (admin) ‚Äî metadados + upload VRP/HRP (ou colar dados)
  - `GET /antennas/:id`, `PUT /antennas/:id`, `DELETE /antennas/:id` (admin)
  - `GET /antennas/:id/diagrams` (VRP/HRP)
- **Projetos (user)**
  - `GET /projects`, `POST /projects`
  - `GET /projects/:id`, `PUT /projects/:id`, `DELETE /projects/:id`
  - `POST /projects/:id/compute` (recalcula composi√ß√£o + m√©tricas, guarda snapshot)
- **Export**
  - `POST /export/pdf` (gera PDF do projeto)
  - `POST /export/pat` (HRP/VRP simples/composto)
  - `POST /export/prn`
  - (Responde arquivo + registra em `exports`)

**Frontend** (Jinja):
- `/` (login/cadastro, com verifica√ß√£o de e-mail).
- `/dashboard` (cards: projetos recentes, exporta√ß√µes).
- `/antennas` (admin CRUD).
- `/projects` (lista + criar/editar -> forms + preview gr√°fico).
- `/reports/:id` (hist√≥rico de exporta√ß√µes).

---

## üóÑÔ∏è Modelagem (SQLAlchemy ‚Äì refer√™ncia)
- `User(id, name, email, password_hash, role[admin|user], cpf_cnpj, phone, address, verified_at, created_at)`
- `Antenna(id, name, model, maker, weight, dimensions, base_gain_dbi, created_by, created_at)`
- `Diagram(id, antenna_id->Antenna, type[VRP|HRP], angle_deg, e_over_emax_linear)` **(pode usar tabelas compactas com JSONB para s√©rie, se preferir, mas priorize 1¬∞ passo simples)**
- `Project(id, user_id, name, tower_height_m, cable_type, cable_length_m, vertical_spacing_m, horizontal_spacing_m, beta_deg, step_deg, freq_hz, notes, created_at)`
- `ProjectAntenna(id, project_id, antenna_id, level_amp, position_idx, custom_phase_deg, custom_spacing_m)`
- `ExportJob(id, project_id, kind[PDF|PAT|PRN], path, meta_json, created_at)`

**Constraints/√çndices**
- Uniques: `(Antenna.name, model, maker)`.
- √çndices em `Diagram(antenna_id, type, angle_deg)`, `Project(user_id)`.
- FKs ON DELETE: `ProjectAntenna.project_id CASCADE`; `Diagram.antenna_id RESTRICT`.
- Valida√ß√£o de CPF/CNPJ server‚Äëside.

---

## üß™ Qualidade, Testes & CI
- **pytest** + **coverage** m√≠nimo 70% para servi√ßos cr√≠ticos (c√°lculos, export, auth).
- Testes de **parsers VRP/HRP**, **reamostragem**, **AF**, **m√©tricas**, **export PAT/PRN/PDF** (goldens pequenos).
- **Flake8/Black** (ou ruff) para lint/format.
- **Makefile/Justfile** com alvos √∫teis: `setup`, `dev`, `test`, `lint`, `migrate`, `seed`, `run`.
- (Opcional) Github Actions simples: lint + testes.

---

## üé® UX/UI Responsiva (crit√©rio de aceite)
- **Header** fixo com logo EFTX, **sidebar** colaps√°vel.
- **Dark theme** com azul EFTX; componentes com estados: hover/focus/disabled/invalid.
- **Formul√°rios** com m√°scaras e help‚Äëtexts (CPF/CNPJ, telefone). Feedback inline de erro.
- Tabelas com pagina√ß√£o e busca; em telas pequenas, transform√°‚Äëlas em cards.
- Gr√°ficos renderizados/embutidos com preview (PNG); bot√µes de **Exportar** (PDF/PAT/PRN).
- **Acessibilidade base**: labels associados, contraste suficiente, navega√ß√£o por teclado.

---

## üìë Exporta√ß√µes ‚Äî Regras (coerentes com c√≥digo fornecido)
- **.PAT (Aba 1)**:
  - HRP: -180..+180 (passo 1), linhas com `ang\tE/Emax\t0`, header `"Edited by <autor>"` etc.
  - VRP: -90..+90 (passo 0.1), mesmo formato.
- **.PAT (Composto)**:
  - Header `'<desc>', <gain>, <num_elems>`; 0..359 (1¬∞) + linhas 356..359; `999`, `1, 91`, `269,` e tail vertical 0..-90.
- **.PRN**:
  - Cabe√ßalho: NAME, MAKE, FREQUENCY (GHz/MHz), H_WIDTH, V_WIDTH, FRONT_TO_BACK, GAIN dBi, TILT MECHANICAL.
  - **HORIZONTAL 360** & **VERTICAL 360** com valor **atenua√ß√£o positiva (dB)** = `max(0, -20*log10(E/Emax))`.
- **PDF**:
  - ReportLab + pypdf: p√°ginas de gr√°ficos (centralizados) + p√°ginas de tabelas **paginadas automaticamente**, cabe√ßalho com t√≠tulo, timbre `modelo.pdf` se dispon√≠vel.
  - Tabelas multi‚Äëcoluna conforme necessidade (6 colunas t√≠picas: √Çngulo, E/Emax, dB √ó N colunas).

---

## ‚öôÔ∏è Opera√ß√£o, Deploy e Observabilidade
- **Config** por ambiente: `config.py` (Dev/Prod). Leitura de `.env`.
- **Healthcheck** `/health`.
- **Logging**: JSON em produ√ß√£o; rota√ß√£o (logrotate) ou stdout (12-factor).
- **Erros** enviados ao Sentry (opcional; configurar DSN via `.env`).
- **Backup BD** di√°rio (script pronto).

---

## üß∞ Tarefas que o Codex deve realizar agora (ordem sugerida)
1) **Auditoria** (se√ß√£o ‚ÄúRoteiro de Descoberta‚Äù) e criar `docs/00-auditoria.md` com achados e lacunas.
2) **Planejamento**: criar `docs/01-plano.md` com milestones (M1: dados/diagrams, M2: projetos/c√°lculo, M3: exporta√ß√µes, M4: UX/seguran√ßa, M5: testes/CI).
3) **Normalizar config**: `.env.example`, `config.py` (SECRET_KEY, DATABASE_URL, JWT, MAIL_*).
4) **Banco**: criar/ajustar modelos + **Alembic migrations** coerentes (NUNCA editar tabelas direto). `flask db migrate`, `flask db upgrade`.
5) **Seeds**: admin master, antenas demo e diagramas de exemplo. `scripts/seed_admin.py`.
6) **Servi√ßos**: consolidar parsing/reamostragem/c√°lculo/exports no pacote `services/` (aproveitar o c√≥digo existente; remover duplicidades).
7) **Rotas** com valida√ß√£o, pagina√ß√£o e RBAC.
8) **Frontend**: Dashboard + formul√°rios + tabelas responsivas + preview de gr√°ficos.
9) **Export**: PDF/PAT/PRN com checagens de formato e pagina√ß√£o de tabelas.
10) **Testes** (unit√°rios para c√°lculos/exports e integra√ß√£o leve de rotas).
11) **Docs**: README com setup, `.env`, comandos de dev e rotas.
12) **Changelog**: documentar altera√ß√µes significativas.

> Ao finalizar cada milestone, gere um **diff aplic√°vel** (`codex apply`) e rode a su√≠te de testes.

---

## ‚úÖ Crit√©rios de Aceite
- `flask run` funciona com `.env` preenchido.
- `flask db upgrade` aplica schema completo.
- CRUD de antenas/admin e projetos/usu√°rio operacionais.
- C√°lculo e **gr√°ficos** (VRP/HRP compostos) ok, **m√©tricas** preenchidas.
- **Exporta√ß√µes** `.PAT`, `.PRN`, **PDF** coerentes com regras acima.
- Frontend responsivo e utiliz√°vel em mobile/desktop.
- Testes cr√≠ticos passando; cobertura b√°sica registrada.
- CHANGELOG atualizado; documenta√ß√£o de execu√ß√£o.

---

## üì¶ Depend√™ncias (m√≠nimas)
flask
flask_sqlalchemy
flask_migrate
flask_jwt_extended
psycopg2-binary
bcrypt
python-dotenv
marshmallow  # ou pydantic, escolha 1 e padronize
reportlab
pypdf
pillow
numpy
matplotlib
gunicorn  # produ√ß√£o (opcional)
email-validator  # valida√ß√£o de e-mails
phonenumbers    # valida√ß√£o de telefone
python-cpf-cnpj # valida√ß√£o de CPF/CNPJ (ou implemente valida√ß√£o pr√≥pria)
ruff # lint (ou flake8/black)
pytest
coverage

---

## üîÑ Boas Pr√°ticas de Altera√ß√£o
- Nunca sobrescrever trabalho existente sem **diff claro** e **commit granulado**.
- Antes de migrar schema, **backup** (se em ambiente real).
- Adotar **feature flags** para mudan√ßas arriscadas (se necess√°rio).
- Mensagens de commit descritivas; pull requests virtuais no `docs/CHANGELOG.md`.

---

## üìù Observa√ß√µes Finais
- Reutilize ao m√°ximo o c√≥digo de parsing/c√°lculo/export **j√° fornecido**; mova para `services/` e escreva testes.
- Mantenha **consist√™ncia de unidades** (graus, dB, linear) e faixas (HRP 0..359, VRP -90..90) em todos os m√≥dulos.
- PDFs devem **pagin√°‚Äëlos** para tabelas grandes, preservando formata√ß√£o profissional.
- Garanta que **PRN** use **atenua√ß√£o positiva** e que os **headers** reflitam os valores computados.
